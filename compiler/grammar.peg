start-symbol: file

include: {{
    #include <algorithm>
    #include <iterator>

    #include "parse_data.h"
}}

code: {{
    compiler::data global_data;
    std::vector<std::string>& identifiers {global_data.identifiers};
    std::vector<compiler::argument>& arguments {global_data.arguments};
    std::vector<std::size_t>& allowed_types {global_data.allowed_types};
    std::vector<std::size_t>& type_refs {global_data.type_refs};

    template<typename type>
    type narrow(const void* ptr)
    {
        return static_cast<type>(reinterpret_cast<ptrdiff_t>(ptr));
    }

    std::size_t intern(std::string str)
    {
        const auto id_i = std::find(identifiers.begin(), identifiers.end(), str);
        if (id_i == identifiers.end()) {
            identifiers.push_back(str);
            return identifiers.size() - 1;
        }
        else {
            return std::distance(identifiers.begin(), id_i);
        }
    }
}}

rules:
file = space* item-list {{ value = &global_data; }}

item-list = space* item item-list | <eof>

item = trait | copy-struct | free-function | other

copy-struct = space* "#[derive(Copy)]" space* accessible-copy-struct

accessible-copy-struct = "pub" wspace copy-struct-body | copy-struct-body

copy-struct-body = space* "struct" space* id:identifier space* "{" field-list space* "}" {{ allowed_types.push_back(narrow<std::size_t>(id.getValue())); }}

field-list = space* field field-list | <void>

field = identifier space* ":" space* field-type space* ";"

field-type = "RRef<" space* copy-field-type space* ">" | simple-field-type

copy-field-type = "[" copy-field-type "]"
    | simple-field-type
    | id:identifier {{
        type_refs.push_back(narrow<std::size_t>(id.getValue()));
    }}

copy-type(type_ref) = "[" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "[";
    }} copy-type(type_ref) "]" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "]";
    }}
    | simple-type(type_ref)
    | id:identifier {{
        type_refs.push_back(narrow<std::size_t>(id.getValue()));
    }} {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += identifiers.at(narrow<std::size_t>(id.getValue()));
    }}

trait = space* "trait" wspace identifier space* "{" function-list space* "}"

function-list = space* member-function function-list | <void>

free-function = space* accessible-function

accessible-function = "pub" wspace free-function-body | free-function-body

free-function-body = space* "fn" wspace identifier space* "(" arg-list space* ")" space* "->" space* type_ref:{{
        arguments.push_back({intern("_RETURN_TYPE"), ""});
        value = reinterpret_cast<void*>(&arguments.back().type);
    }} arg-type(type_ref) space* ";"

member-function = space* "fn" wspace identifier space* "(" space* self-arg arg-list-tail space* ")" space* "->" space* type_ref:{{
        arguments.push_back({intern("_RETURN_TYPE"), ""});
        value = reinterpret_cast<void*>(&arguments.back().type);
    }} arg-type(type_ref) space* ";"

self-arg = "&" space* mut-marker? "self"

mut-marker = "mut" wspace

arg-list = space* argument space* arg-list-tail

arg-list-tail = "," arg-list | <void>

argument = id:identifier type_ref:{{
        arguments.push_back({narrow<std::size_t>(id.getValue()), ""});
        value = reinterpret_cast<void*>(&arguments.back().type);
    }} space* ":" space* arg-type(type_ref)

arg-type(type_ref) = "RRef<" space* "dyn" wspace id:identifier space* ">" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "RRef<dyn " + identifiers.at(narrow<std::size_t>(id.getValue())) + ">";
    }}
    | "RRef<" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "RRef<";
    }} space* copy-type(type_ref) space* ">" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += ">";
    }}
    | simple-type(type_ref)

other = space* "//" any-char* eol

eol = "\r\n" | "\n" | <eof>

simple-type(type_ref) = "char" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "char";
    }}
    | "bool" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "bool";
    }}
    | "f32" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "f32";
    }}
    | "f64" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "f64";
    }}
    | "i8" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "i8";
    }}
    | "i16" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "i16";
    }}
    | "i32" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "i32";
    }}
    | "i64" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "i64";
    }}
    | "i128" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "i128";
    }}
    | "isize" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "isize";
    }}
    | "u8" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "u8";
    }}
    | "u16" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "u16";
    }}
    | "u32" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "u32";
    }}
    | "u64" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "u64";
    }}
    | "u128" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "u128";
    }}
    | "usize" {{ 
        const auto type = (std::string*)(type_ref.getValue());
        *type += "usize";
    }}

simple-field-type = "char"
    | "bool"
    | "f32"
    | "f64"
    | "i8"
    | "i16"
    | "i32"
    | "i64"
    | "i128"
    | "isize"
    | "u8"
    | "u16"
    | "u32"
    | "u64"
    | "u128"
    | "usize"

identifier = "_" ch:tail-char+ {{
        std::string id {"_"};
        for (const auto val : ch.getValues()) {
            const auto chr = narrow<char>(val.getValue());
            id += chr;
        }
        
        value = reinterpret_cast<void*>(intern(id));
    }}
    | hch:head-char ch:tail-char* {{
        std::string id {narrow<char>(hch.getValue())};
        for (const auto val : ch.getValues()) {
            const auto chr = narrow<char>(val.getValue());
            id += chr;
        }

        value = reinterpret_cast<void*>(intern(id));
    }}

any-char = [_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()-=+{}\\|;':\",./<>? \t]

head-char = [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890]

tail-char = [_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890]

wspace = space+

space = [\n\t\r ]